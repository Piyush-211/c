#include <iostream>
#include <GL/glut.h>
#include <cmath>
using namespace std;

int xc = 300, yc = 300;

void displayPoint(int x, int y) {
    glColor3f(0, 1, 0);
    glPointSize(2);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void plotPoint(int xc, int yc, int x, int y) {
    glColor3f(0, 1, 1);
    glPointSize(2);
    glBegin(GL_POINTS);
    glVertex2i(xc + x, yc + y);
    glVertex2i(xc - x, yc - y);
    glVertex2i(xc + y, yc + x);
    glVertex2i(xc - y, yc - x);
    glVertex2i(xc + y, yc - x);
    glVertex2i(xc - y, yc + x);
    glVertex2i(xc - x, yc + y);
    glVertex2i(xc + x, yc - y);
    glEnd();
}

void bresenhams_circle(int xc, int yc, int radius) {
    int x = 0;
    int y = radius;
    plotPoint(xc, yc, x, y);
    int p = 3 - 2 * radius;
    while (x <= y) {
        if (p < 0) {
            x++;
            p += 4 * x + 6;
        } else {
            x++;
            y--;
            p += 4 * (x - y) + 10;
        }
        plotPoint(xc, yc, x, y);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw center circle
    bresenhams_circle(xc, yc, 100); // Center circle

    // Draw intersecting circles
    bresenhams_circle(xc + 150, yc + 150, 50);   // Top-right
    bresenhams_circle(xc - 150, yc + 150, 50);   // Top-left
    bresenhams_circle(xc + 150, yc - 150, 50);   // Bottom-right
    bresenhams_circle(xc - 150, yc - 150, 50);   // Bottom-left
    bresenhams_circle(xc + 100, yc, 50);         // Right
    bresenhams_circle(xc - 100, yc, 50);         // Left
    bresenhams_circle(xc, yc + 100, 50);         // Bottom
    bresenhams_circle(xc, yc - 100, 50);         // Top

    glFlush();
}

void initialise() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    gluOrtho2D(0, 600, 0, 600);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham's Circle Drawing - Scenario (b)");
    initialise();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
